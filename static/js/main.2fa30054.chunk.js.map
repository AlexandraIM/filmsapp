{"version":3,"sources":["components/Header/Header.js","components/Films/Film/Film.js","components/Films/Films.js","components/Button/Button.js","components/EditModal/EditModal.js","App.js","serviceWorker.js","index.js"],"names":["header","props","react_default","a","createElement","className","film","onClick","clicked","id","alt","src","title","description","Films","_this","this","films","filmsList","map","Film_Film","key","img","editFilm","Component","button","style","border","color","padding","margin","cursor","background","type","children","EditModal","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeHandler","e","name","target","value","setState","defineProperty","state","_this2","onChange","Button","onSave","onCancel","App","isOpen","filmToEdit","openEditFormHandler","console","log","closeEditFormHandler","saveFilmHandler","preventDefault","toConsumableArray","filmToUpdate","findIndex","f","editModal","components_EditModal_EditModal","find","Header_Header","components_Films_Films","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fa30054.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css'\r\n\r\nconst header = (props) => {\r\n  return ( \r\n    <div className=\"header\">\r\n      <h1>{props.header}</h1>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Film.css';\r\n\r\nconst film = (props) => {\r\n  return (\r\n    <div className=\"film\" onClick={() => props.clicked(props.id)}>\r\n      <img alt=\"film poster\" src={props.src}></img>\r\n      <h2>{props.title}</h2>\r\n      <p>{props.description}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nfilm.propTypes = {\r\n  id:PropTypes.number.isRequired,\r\n  src:PropTypes.string,\r\n  title:PropTypes.string.isRequired,\r\n  description:PropTypes.string,\r\n  clicked:PropTypes.func\r\n}\r\n\r\nexport default film;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FilmCard from './Film/Film';\r\n\r\nimport './Films.css';\r\n\r\n\r\nclass Films extends Component{\r\n\r\n  render(){\r\n    const films = this.props.filmsList.map(film => {\r\n      return <FilmCard \r\n              key={film.id} \r\n              title={film.title} \r\n              src={film.img} \r\n              description={film.description}\r\n              id={film.id}\r\n              clicked={this.props.editFilm}/>\r\n    } )\r\n    return ( \r\n      <div className=\"films\">\r\n        {films}\r\n      </div>)\r\n  }\r\n}\r\n\r\nFilms.propTypes = {\r\n  filmsList:PropTypes.arrayOf(PropTypes.shape({\r\n    id:PropTypes.number.isRequired,\r\n    img:PropTypes.string,\r\n    title:PropTypes.string.isRequired,\r\n    description:PropTypes.string\r\n  })).isRequired,\r\n  editFilm:PropTypes.func\r\n}\r\n\r\nexport default Films;","import React from 'react';\r\n\r\n\r\nconst button = (props) => {\r\n  const buttonStyle = {\r\n    border: 'none',\r\n    color: 'white',\r\n    padding: '14px 28px',\r\n    margin: '5px',\r\n    cursor: 'pointer',\r\n    background:'green'\r\n  }\r\n\r\n  return (\r\n    <button style={buttonStyle} type={props.type} onClick={props.clicked}>{props.children}</button>\r\n  )\r\n}\r\n\r\nexport default button;","import React,  { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '../Button/Button';\r\n\r\nimport './EditModal.css';\r\n\r\nclass EditModal extends Component {\r\n   constructor(props){\r\n     super(props);\r\n     this.state = {\r\n       img : props.film.img,\r\n       title: props.film.title,\r\n       description: props.film.description,\r\n       id: props.film.id\r\n     }\r\n   }\r\n\r\n  changeHandler =(e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value\r\n    this.setState({\r\n       [name]:value })\r\n  }\r\n\r\n  render(){\r\n    \r\n    return (\r\n      <div className=\"backdrop\">\r\n        <div className=\"modal\">\r\n          <form>\r\n            <label>Image source:</label>\r\n            <input type=\"text\" value={this.state.img} name=\"img\" onChange={this.changeHandler}/>\r\n            <label>Title:</label>\r\n            <input type=\"text\" value={this.state.title} name=\"title\" onChange={this.changeHandler}/> \r\n            <label>Description</label>\r\n            <textarea value={this.state.description} name=\"description\" onChange={this.changeHandler}></textarea>\r\n            <Button clicked={(e)=>this.props.onSave(e,this.state)} >Save</Button>\r\n            <Button clicked={this.props.onCancel}>Cancel</Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nEditModal.propTypes = {\r\n  film: PropTypes.shape({\r\n    id:PropTypes.number.isRequired,\r\n    img:PropTypes.string,\r\n    title:PropTypes.string.isRequired,\r\n    description:PropTypes.string\r\n  }).isRequired,\r\n  onSave: PropTypes.func.isRequired,\r\n  onCancel: PropTypes.func.isRequired\r\n}\r\n\r\nexport default EditModal;","import React, { Component } from 'react';\n\nimport Header from './components/Header/Header';\nimport Films from './components/Films/Films';\nimport EditModal from './components/EditModal/EditModal';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    isOpen:false,\n    filmToEdit:null,\n    films : [\n      {\n        id:1,\n        title: \"The Matrix\", \n        img:\"https://upload.wikimedia.org/wikipedia/en/thumb/c/c1/The_Matrix_Poster.jpg/220px-The_Matrix_Poster.jpg\", \n        description:\"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.\"\n      },\n      {\n        id:2,\n        title:\"Captain Marvel\",\n        img:\"https://upload.wikimedia.org/wikipedia/en/8/85/Captain_Marvel_poster.jpg\",\n        description:\"Carol Danvers becomes one of the universe's most powerful heroes when Earth is caught in the middle of a galactic war between two alien races.\"\n      },\n      {\n        id:3,\n        title:\"Suicide Squad\",\n        img:\"https://upload.wikimedia.org/wikipedia/en/thumb/5/50/Suicide_Squad_%28film%29_Poster.png/220px-Suicide_Squad_%28film%29_Poster.png\",\n        description:\"A secret government agency recruits some of the most dangerous incarcerated super-villains to form a defensive task force. Their first mission: save the world from the apocalypse.\"\n      },\n      {\n        id:4,\n        title:\"A Dog's Purpose\",\n        img:\"https://upload.wikimedia.org/wikipedia/en/thumb/b/bf/A_Dog%27s_Purpose_%28film%29.jpg/220px-A_Dog%27s_Purpose_%28film%29.jpg\",\n        description:\"A dog looks to discover his purpose in life over the course of several lifetimes and owners.\"\n      }\n    ]\n  }\n\n  openEditFormHandler = (id) => {\n    console.log(id);\n    //const films = [...this.state.films];\n    //const filmToEdit = films.find((film) => film.id === id);\n    this.setState({\n      isOpen:true,\n      filmToEdit: id\n    })\n  }\n\n  closeEditFormHandler = () => {\n    this.setState({isOpen:false})\n  }\n\n  saveFilmHandler = (e,film) => {\n    e.preventDefault();\n    const films = [...this.state.films];\n    const filmToUpdate = films.findIndex(f => f.id === film.id);\n    films[filmToUpdate] = film;\n    this.setState({films:films, isOpen: false});\n  }\n\n\n  render() {\n    let editModal;\n    editModal = this.state.isOpen ? <EditModal\n    onCancel={this.closeEditFormHandler}\n    onSave={this.saveFilmHandler}\n    film={this.state.films.find(film => film.id === this.state.filmToEdit)}\n  /> : null\n\n    return (\n      <div className=\"App\">\n        <Header header=\"Some cool films\"/>\n        <Films \n          filmsList = {this.state.films}\n          editFilm = {this.openEditFormHandler}\n          />\n        {editModal}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}