{"version":3,"sources":["components/Header/Header.js","components/Films/Film/Film.js","services/movie_service.js","actions/actions.js","components/Films/Films.js","components/Button/Button.js","components/EditModal/EditModal.js","App.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["header","props","react_default","a","createElement","className","film","onClick","clicked","id","alt","src","title","year","fetchMovies","fetch","then","response","json","GET_MOVIES","OPEN_EDIT","CLOSE_EDIT","SAVE_FILM","fetchData","dispatch","d","type","data","getMovies","Search","Films","this","getFilms","_this","films","map","Film_Film","key","imdbID","Title","Poster","Year","editFilm","Component","connect","state","filmId","button","style","border","color","padding","margin","cursor","background","children","EditModal","changeHandler","e","name","target","value","setState","Object","defineProperty","objectSpread","_this2","onChange","Button","save","closeEdit","filmToEdit","saveFilm","App","Header_Header","components_Films_Films","open","components_EditModal_EditModal","Boolean","window","location","hostname","match","initialState","reducer","arguments","length","undefined","action","find","toConsumableArray","filmToUpdate","findIndex","f","store","createStore","compose","applyMiddleware","thunk","logger","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e21b13e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Header.css'\r\n\r\nconst header = (props) => {\r\n  return ( \r\n    <div className=\"header\">\r\n      <h1>{props.header}</h1>\r\n    </div>\r\n    );\r\n}\r\n\r\nheader.propTypes = {\r\n  header: PropTypes.string.isRequired\r\n}\r\nexport default header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Film.css';\r\n\r\nconst film = (props) => {\r\n  return (\r\n    <div className=\"film\" onClick={() => props.clicked(props.id)}>\r\n      <img alt=\"film poster\" src={props.src}></img>\r\n      <h2>{props.title}</h2>\r\n      <p>{props.year}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nfilm.propTypes = {\r\n  id:PropTypes.string.isRequired,\r\n  src:PropTypes.string,\r\n  title:PropTypes.string.isRequired,\r\n  description:PropTypes.string\r\n}\r\n\r\n\r\nexport default film;","\r\n\r\nfunction fetchMovies () {\r\n  return fetch('https://www.omdbapi.com/?apikey=792db8bc&s=batman')//predefine search parameter \r\n  .then(response => response.json())\r\n}\r\n\r\nexport default fetchMovies;","import fetchMovies from '../services/movie_service';\r\n\r\nexport const GET_MOVIES = \"GET_MOVIES\";\r\nexport const OPEN_EDIT = \"OPEN_EDIT\";\r\nexport const CLOSE_EDIT = \"CLOSE_EDIT\";\r\nexport const SAVE_FILM = \"SAVE_FILM\";\r\n\r\nexport function getMovies (d) {\r\n  return {\r\n    type: GET_MOVIES,\r\n    data: d\r\n  }\r\n}\r\n\r\nexport function openEditModal(filmId){\r\n  return {\r\n    type: OPEN_EDIT,\r\n    filmId: filmId\r\n  }\r\n}\r\n\r\nexport function closeEditModal(){\r\n  return {\r\n    type: CLOSE_EDIT\r\n  }\r\n}\r\n\r\nexport function saveFilm(film){\r\n  return {\r\n    type: SAVE_FILM,\r\n    film: film\r\n  }\r\n}\r\n\r\nexport function fetchData() { \r\n  return dispatch => {\r\n    return fetchMovies()\r\n    .then(d => dispatch(getMovies(d.Search)))\r\n  }\r\n }","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux'\r\nimport FilmCard from './Film/Film';\r\n\r\nimport {fetchData, openEditModal} from '../../actions/actions';\r\n\r\nimport './Films.css';\r\n\r\n\r\nclass Films extends Component{\r\n\r\n  componentDidMount(){\r\n    this.props.getFilms();\r\n  }\r\n\r\n  render(){\r\n    const films = this.props.films.map(film => {\r\n      return <FilmCard \r\n              key={film.imdbID} \r\n              title={film.Title} \r\n              src={film.Poster}\r\n              year={film.Year}\r\n              id={film.imdbID}\r\n              clicked={this.props.editFilm}/>\r\n    } )\r\n    return ( \r\n      <div className=\"films\">\r\n        {films}\r\n      </div>)\r\n  }\r\n}\r\n\r\nFilms.propTypes = {\r\n  editFilm:PropTypes.func\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    films: state.films\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps= (dispatch) => {\r\n  return {\r\n    getFilms : () => dispatch(fetchData()),\r\n    editFilm : (id) => dispatch(openEditModal(id))\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Films);","import React from 'react';\r\n\r\n\r\nconst button = (props) => {\r\n  const buttonStyle = {\r\n    border: 'none',\r\n    color: 'white',\r\n    padding: '14px 28px',\r\n    margin: '5px',\r\n    cursor: 'pointer',\r\n    background:'green'\r\n  }\r\n\r\n  return (\r\n    <button style={buttonStyle} type={props.type} onClick={props.clicked}>{props.children}</button>\r\n  )\r\n}\r\n\r\nexport default button;","import React,  { Component } from 'react';\r\nimport Button from '../Button/Button';\r\nimport { connect } from 'react-redux';\r\nimport {closeEditModal, saveFilm} from '../../actions/actions';\r\n\r\nimport './EditModal.css';\r\n\r\nclass EditModal extends Component {\r\n  state = {\r\n    imdbID:'',\r\n    Poster:'',\r\n    Title:'',\r\n    Year:''\r\n  }\r\n\r\n  componentDidMount(){\r\n      this.setState({...this.props.film});\r\n  }\r\n\r\n\r\n  changeHandler =(e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value\r\n    this.setState({\r\n       [name]:value })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"backdrop\">\r\n        <div className=\"modal\">\r\n          <form >\r\n            <label>Image source:</label>\r\n            <input type=\"text\" value={this.state.Poster} name=\"Poster\" onChange={this.changeHandler}/>\r\n            <label>Title:</label>\r\n            <input type=\"text\" value={this.state.Title} name=\"Title\" onChange={this.changeHandler}/> \r\n            <label>Year</label>\r\n            <input type=\"text\" value={this.state.Year} name=\"Year\" onChange={this.changeHandler}/>\r\n            <Button clicked={() => this.props.save(this.state)}>Save</Button>\r\n            <Button clicked={this.props.closeEdit}>Cancel</Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    film: state.filmToEdit\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps= (dispatch) => {\r\n  return {\r\n    closeEdit : () => dispatch(closeEditModal()),\r\n    save : (film) => dispatch(saveFilm(film))\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(EditModal);","import React, { Component } from 'react';\nimport Header from './components/Header/Header';\nimport Films from './components/Films/Films';\nimport EditModal from './components/EditModal/EditModal';\nimport './App.css';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Header header=\"Some cool films\"/>\n        <Films/>\n        {this.props.open ? <EditModal/> :null}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    open: state.open\n  };\n}\n\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_MOVIES, OPEN_EDIT, CLOSE_EDIT,SAVE_FILM} from '../actions/actions';\r\n\r\nconst initialState = {\r\n  films:[],\r\n  open:false,\r\n  filmToEdit:{}\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_MOVIES:\r\n      return {\r\n        ...state,\r\n        films: action.data\r\n      }\r\n    case OPEN_EDIT:{\r\n      return {\r\n        ...state,\r\n        open:true,\r\n        filmToEdit: state.films.find(film => film.imdbID === action.filmId)\r\n      }\r\n    }\r\n    case CLOSE_EDIT:{\r\n      return {\r\n        ...state,\r\n        open:false\r\n      }\r\n    }\r\n    case SAVE_FILM:{\r\n      const films = [...state.films];\r\n      const filmToUpdate = films.findIndex(f => f.imdbID === action.film.imdbID);\r\n      films[filmToUpdate] = action.film;\r\n      return {\r\n        ...state,\r\n        open:false,\r\n        films:films\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer","import { createStore, applyMiddleware,compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from '../reducers/index';\r\nimport logger from 'redux-logger';\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  compose(\r\n    applyMiddleware(thunk,logger),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}