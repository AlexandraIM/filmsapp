{"version":3,"sources":["components/Header/Header.js","components/Films/Film/Film.js","components/Films/Films.js","App.js","serviceWorker.js","index.js"],"names":["header","props","react_default","a","createElement","className","film","alt","src","title","description","Films","state","films","id","img","this","map","Film_Film","key","Component","App","Header_Header","components_Films_Films","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAWeA,SARA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMD,WCOFM,SAVF,SAACL,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKG,IAAI,cAAcC,IAAKP,EAAMO,MAClCN,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,OACXP,EAAAC,EAAAC,cAAA,SAAIH,EAAMS,gBC4CDC,oNA5CbC,MAAQ,CACNC,MAAQ,CACN,CACEC,GAAG,EACHL,MAAO,aACPM,IAAI,yGACJL,YAAY,yIAEd,CACEI,GAAG,EACHL,MAAM,iBACNM,IAAI,2EACJL,YAAY,kJAEd,CACEI,GAAG,EACHL,MAAM,gBACNM,IAAI,qIACJL,YAAY,uLAEd,CACEI,GAAG,EACHL,MAAM,kBACNM,IAAI,+HACJL,YAAY,0KAMhB,IAAMG,EAAQG,KAAKJ,MAAMC,MAAMI,IAAI,SAAAX,GACjC,OAAOJ,EAAAC,EAAAC,cAACc,EAAD,CACCC,IAAKb,EAAKQ,GACVL,MAAOH,EAAKG,MACZD,IAAKF,EAAKS,IACVL,YAAaJ,EAAKI,gBAE5B,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZQ,UAzCWO,cCWLC,0LATX,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkB,EAAD,CAAQtB,OAAO,oBACfE,EAAAC,EAAAC,cAACmB,EAAD,cALUH,cCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.db06fcd6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css'\r\n\r\nconst header = (props) => {\r\n  return ( \r\n    <div className=\"header\">\r\n      <h1>{props.header}</h1>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default header;","import React from 'react';\r\nimport './Film.css';\r\n\r\nconst film = (props) => {\r\n  return (\r\n    <div className=\"film\">\r\n      <img alt=\"film poster\" src={props.src}></img>\r\n      <h2>{props.title}</h2>\r\n      <p>{props.description}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default film;","import React, {Component} from 'react';\r\nimport FilmCard from './Film/Film';\r\n\r\nimport './Films.css';\r\n\r\n\r\nclass Films extends Component{\r\n\r\n  state = {\r\n    films : [\r\n      {\r\n        id:1,\r\n        title: \"The Matrix\", \r\n        img:\"https://upload.wikimedia.org/wikipedia/en/thumb/c/c1/The_Matrix_Poster.jpg/220px-The_Matrix_Poster.jpg\", \r\n        description:\"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.\"\r\n      },\r\n      {\r\n        id:2,\r\n        title:\"Captain Marvel\",\r\n        img:\"https://upload.wikimedia.org/wikipedia/en/8/85/Captain_Marvel_poster.jpg\",\r\n        description:\"Carol Danvers becomes one of the universe's most powerful heroes when Earth is caught in the middle of a galactic war between two alien races.\"\r\n      },\r\n      {\r\n        id:3,\r\n        title:\"Suicide Squad\",\r\n        img:\"https://upload.wikimedia.org/wikipedia/en/thumb/5/50/Suicide_Squad_%28film%29_Poster.png/220px-Suicide_Squad_%28film%29_Poster.png\",\r\n        description:\"A secret government agency recruits some of the most dangerous incarcerated super-villains to form a defensive task force. Their first mission: save the world from the apocalypse.\"\r\n      },\r\n      {\r\n        id:4,\r\n        title:\"A Dog's Purpose\",\r\n        img:\"https://upload.wikimedia.org/wikipedia/en/thumb/b/bf/A_Dog%27s_Purpose_%28film%29.jpg/220px-A_Dog%27s_Purpose_%28film%29.jpg\",\r\n        description:\"A dog looks to discover his purpose in life over the course of several lifetimes and owners.\"\r\n      }\r\n    ]\r\n  }\r\n\r\n  render(){\r\n    const films = this.state.films.map(film => {\r\n      return <FilmCard \r\n              key={film.id} \r\n              title={film.title} \r\n              src={film.img} \r\n              description={film.description}/>\r\n    } )\r\n    return ( \r\n      <div className=\"films\">\r\n        {films}\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default Films;","import React, { Component } from 'react';\n\nimport Header from './components/Header/Header';\nimport Films from './components/Films/Films';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header header=\"Some cool films\"/>\n        <Films/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}